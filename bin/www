#!/usr/bin/env node
"use strict";
/**
 * Module dependencies.
 */
let config       = require('../config');
let app          = require('../app');
let debug        = require('debug')('message_pub:server');
let http         = require('http');
// let https        = require('https');

// let fs           = require('fs');
// let privateKey   = fs.readFileSync('certificates/privatekey.pem', 'utf8');
// let certificate  = fs.readFileSync('certificates/certificate.pem', 'utf8');
// let credentials  = {key: privateKey, cert: certificate, passphrase: "helloworld"};

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || config.port);
app.set('port', port);

if (false) { // config.iscluster
    /**
     * Cluster.
     */

    let cluster = require('cluster');
    let numCPUs = require('os').cpus().length;

    if (cluster.isMaster) {
        // Fork a worker process
        for (let i = 0; i < numCPUs; i++) {
            console.log("[Fork]:", "Process (" + i +")");
            cluster.fork();
        }

        cluster.on('listening', (worker, address) => {
            console.log('worker ' + worker.process.pid +', listen: '+address.address+":"+address.port);
        });

        cluster.on('exit', (worker, code, signal) => {
            console.log('worker ' + worker.process.pid + ' died');
            // Restart a worker process
            cluster.fork();
        });
    } else {
        // app.listen(app.get('port'));
        console.log('[Worker]: #' + cluster.worker.id); 
    }
};

/**
* Create HTTP server.
*/

let server  = http.createServer(app);
// let httpsServer  = https.createServer(credentials,app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// httpsServer.listen(443);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

